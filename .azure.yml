jobs:

######################
###### Linux #########
######################

- job: Linux
  timeoutInMinutes: 120
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      AMD64 (x64):
        dockerTag: 'amd64'
        dockerName: 'Debian Stretch (AMD64)'
        platform: 'x11'
      i386 (x86):
        dockerTag: 'i386'
        dockerName: 'Debian Stretch (i386)'
        platform: 'x11'
      ARMv6hf (Raspberry Pi v1 & ZERO):
        dockerTag: 'armv6hf'
        dockerName: 'Debian Stretch (Raspberry Pi v1 & ZERO)'
        platform: 'rpi'
      ARMv7hf (Raspberry Pi 2 & 3):
        dockerTag: 'armv7hf'
        dockerName: 'Debian Stretch (Raspberry Pi 2 & 3)'
        platform: 'rpi'
      ARMv8 (Generic AARCH64):
        dockerTag: 'aarch64'
        dockerName: 'ARMv8 (Generic AARCH64)'
        platform: 'amlogic'

  steps:
  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  # build process
  - bash: ./.ci/ci_build.sh
    displayName: 'Build $(dockerName)'
    env:
      DOCKER_TAG: $(dockerTag)
      DOCKER_NAME: $(dockerName)
      PLATFORM: $(platform)

  # read version.json and generate pipeline variables
  - task: oneLuckiDevJson2Variable@1
    inputs:
      jsonFile: 'version.json'
      shouldPrefixVariables: true
      variablePrefix: 'json'
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Read and generate pipeline variables'

  # copy files
  - bash: 'cp -v deploy/Hyperion.NG-* $(Build.ArtifactStagingDirectory)'
    workingDirectory: '$(Build.SourcesDirectory)'
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Collecting deployable artifacts'

  # publish artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: $(dockerTag)
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Publish deployables artifacts'

  # assign latest tag variable
  - bash: echo "##vso[task.setvariable variable=latestTag]$(git tag | tail -1)"
    displayName: "Read latest tag"
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

  # create or update github release
  - task: GithubRelease@0
    inputs: 
      gitHubConnection: Hyperion.NG
      repositoryName: $(Build.Repository.Name)
      action: edit
      target: $(Build.SourceVersion)
      tagSource: manual
      tag: '$(latestTag)'
      title: '# $(latestTag) v$(json.versionnr)'
      releaseNotesSource: input
      releaseNotes: $(Build.SourceVersionMessage)
      assets: '$(Build.ArtifactStagingDirectory)/*'
      assetUploadMode: 'replace'
      isPreRelease: true
      addChangeLog: false
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: Create/Update GitHub release

######################
###### macOS #########
######################

- job: macOS
  timeoutInMinutes: 120
  pool:
    vmImage: 'macOS-10.13'

  steps:
  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  # install dependencies
  - bash: ./.ci/ci_install.sh
    displayName: 'Install dependencies'

  # build process
  - bash: ./.ci/ci_build.sh
    displayName: 'Build macOS 10.13'

  # read version.json and generate pipeline variables
  - task: oneLuckiDevJson2Variable@1
    inputs:
      jsonFile: 'version.json'
      shouldPrefixVariables: true
      variablePrefix: 'json'
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Read and generate pipeline variables'

  # copy files
  - bash: 'cp -v build/Hyperion.NG-* $(Build.ArtifactStagingDirectory)'
    workingDirectory: '$(Build.SourcesDirectory)'
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Collecting deployable artifacts'

  # publish artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'macos'
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Publish deployables artifacts'

  # generate latest tag variable
  - bash: echo "##vso[task.setvariable variable=latestTag]$(git tag | tail -1)"
    displayName: "Read latest tag"
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

  # create or update github release
  - task: GithubRelease@0
    inputs: 
      gitHubConnection: Hyperion.NG
      repositoryName: $(Build.Repository.Name)
      action: edit
      target: $(Build.SourceVersion)
      tagSource: manual
      tag: '$(latestTag)'
      title: '# $(latestTag) v$(json.versionnr)'
      releaseNotesSource: input
      releaseNotes: $(Build.SourceVersionMessage)
      assets: '$(Build.ArtifactStagingDirectory)/*'
      assetUploadMode: 'replace'
      isPreRelease: true
      addChangeLog: false
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: Create/Update GitHub release
